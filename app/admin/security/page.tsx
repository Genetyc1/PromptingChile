"use client"

import type React from "react"

import { useSession } from "next-auth/react"
import { useRouter } from "next/navigation"
import { useEffect, useState } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { ArrowLeft, Download, RefreshCw, Shield, AlertTriangle, CheckCircle, Clock } from "lucide-react"
import Link from "next/link"

interface AuditLog {
  id: string
  timestamp: string | Date
  userEmail: string
  action: string
  resource: string
  details?: string
}

interface SecurityStats {
  totalLoginAttempts: number
  todayLoginAttempts: number
  weekLoginAttempts: number
  failedLoginAttempts: number
  totalAuditLogs: number
  todayAuditLogs: number
  lastUpdate?: string
}

interface SecurityMetric {
  title: string
  value: string
  status: "good" | "warning" | "critical"
  icon: React.ReactNode
}

export default function SecurityPage() {
  const { data: session, status } = useSession()
  const router = useRouter()
  const [auditLogs, setAuditLogs] = useState<AuditLog[]>([])
  const [securityStats, setSecurityStats] = useState<SecurityStats>({
    totalLoginAttempts: 0,
    todayLoginAttempts: 0,
    weekLoginAttempts: 0,
    failedLoginAttempts: 0,
    totalAuditLogs: 0,
    todayAuditLogs: 0,
  })
  const [loading, setLoading] = useState(true)
  const [lastUpdate, setLastUpdate] = useState<string>("")

  useEffect(() => {
    if (status === "unauthenticated") {
      router.push("/auth/signin")
    }
    if (session?.user?.role && !["owner", "admin"].includes(session.user.role as string)) {
      router.push("/admin/unauthorized")
    }
  }, [status, session, router])

  const fetchLogs = async () => {
    try {
      const response = await fetch("/api/admin/logs")
      if (response.ok) {
        const data = await response.json()
        setAuditLogs(data.logs || [])
        setSecurityStats(data.stats || securityStats)
        setLastUpdate(new Date().toLocaleTimeString("es-CL"))
      }
    } catch (error) {
      console.error("Error fetching logs:", error)
    } finally {
      setLoading(false)
    }
  }

  useEffect(() => {
    fetchLogs()

    // Actualizar cada 5 segundos
    const interval = setInterval(fetchLogs, 5000)

    return () => clearInterval(interval)
  }, [])

  const securityMetrics: SecurityMetric[] = [
    {
      title: "Intentos de Login Fallidos",
      value: `${securityStats.failedLoginAttempts} intentos`,
      status:
        securityStats.failedLoginAttempts > 5 ? "critical" : securityStats.failedLoginAttempts > 2 ? "warning" : "good",
      icon: <AlertTriangle className="h-5 w-5" />,
    },
    {
      title: "Sesiones Activas",
      value: "1 usuario conectado",
      status: "good",
      icon: <CheckCircle className="h-5 w-5" />,
    },
    {
      title: "Logs de Auditoría",
      value: `${securityStats.totalAuditLogs} registros`,
      status: "good",
      icon: <Shield className="h-5 w-5" />,
    },
    {
      title: "Última Actualización",
      value: lastUpdate || "Cargando...",
      status: "good",
      icon: <Clock className="h-5 w-5" />,
    },
  ]

  const getStatusColor = (status: string) => {
    switch (status) {
      case "success":
      case "good":
        return "bg-green-100 text-green-800"
      case "warning":
        return "bg-yellow-100 text-yellow-800"
      case "error":
      case "critical":
        return "bg-red-100 text-red-800"
      default:
        return "bg-gray-100 text-gray-800"
    }
  }

  const getActionColor = (action: string) => {
    switch (action.toUpperCase()) {
      case "LOGIN":
      case "VIEW_LOGS":
        return "bg-blue-100 text-blue-800"
      case "CREATE_USER":
      case "BACKUP_CREATED":
        return "bg-green-100 text-green-800"
      case "DELETE_USER":
        return "bg-red-100 text-red-800"
      case "UPDATE_SETTINGS":
      case "TOGGLE_USER_STATUS":
        return "bg-yellow-100 text-yellow-800"
      default:
        return "bg-gray-100 text-gray-800"
    }
  }

  const handleGenerateBackup = () => {
    alert("Generando backup del sistema...")
    // Simular creación de backup
    const newLog: AuditLog = {
      id: `backup-${Date.now()}`,
      timestamp: new Date(),
      userEmail: session?.user?.email || "system",
      action: "BACKUP_GENERATED",
      resource: "System Backup",
      details: "Manual backup generated by user",
    }
    setAuditLogs([newLog, ...auditLogs])
  }

  const handleExportLogs = () => {
    const csvContent = [
      "Timestamp,User,Action,Resource,Details",
      ...auditLogs.map(
        (log) =>
          `"${new Date(log.timestamp).toLocaleString("es-CL")}","${log.userEmail}","${log.action}","${log.resource}","${log.details || ""}"`,
      ),
    ].join("\n")

    const blob = new Blob([csvContent], { type: "text/csv" })
    const url = window.URL.createObjectURL(blob)
    const a = document.createElement("a")
    a.href = url
    a.download = `audit-logs-${new Date().toISOString().split("T")[0]}.csv`
    a.click()
    window.URL.revokeObjectURL(url)
  }

  if (status === "loading" || loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-[#C28840]"></div>
      </div>
    )
  }

  if (!session) return null

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="bg-white shadow">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex items-center justify-between py-6">
            <div className="flex items-center space-x-4">
              <Link href="/admin">
                <Button variant="outline" size="sm">
                  <ArrowLeft className="h-4 w-4 mr-2" />
                  Volver
                </Button>
              </Link>
              <div>
                <h1 className="text-3xl font-bold text-gray-900">Seguridad y Auditoría</h1>
                <p className="text-gray-600">Monitoreo de seguridad y logs del sistema</p>
              </div>
            </div>
            <div className="flex space-x-2">
              <Button onClick={handleGenerateBackup} variant="outline">
                <Download className="h-4 w-4 mr-2" />
                Generar Backup
              </Button>
              <Button onClick={fetchLogs} variant="outline">
                <RefreshCw className="h-4 w-4 mr-2" />
                Actualizar
              </Button>
            </div>
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
        <div className="px-4 py-6 sm:px-0 space-y-6">
          {/* Métricas de Seguridad */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
            {securityMetrics.map((metric, index) => (
              <Card key={index}>
                <CardContent className="p-4">
                  <div className="flex items-center space-x-3">
                    <div className={`p-2 rounded-full ${getStatusColor(metric.status)}`}>{metric.icon}</div>
                    <div>
                      <p className="text-sm font-medium text-gray-600">{metric.title}</p>
                      <p className="text-lg font-semibold">{metric.value}</p>
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>

          {/* Logs de Auditoría */}
          <Card>
            <CardHeader>
              <div className="flex items-center justify-between">
                <div>
                  <CardTitle>Logs de Auditoría</CardTitle>
                  <CardDescription>
                    Registro de actividades del sistema - Actualización automática cada 5 segundos
                  </CardDescription>
                </div>
                <Button onClick={handleExportLogs} variant="outline" size="sm">
                  <Download className="h-4 w-4 mr-2" />
                  Exportar CSV
                </Button>
              </div>
            </CardHeader>
            <CardContent>
              <div className="overflow-x-auto">
                <table className="w-full text-sm">
                  <thead>
                    <tr className="border-b">
                      <th className="text-left p-2">Timestamp</th>
                      <th className="text-left p-2">Usuario</th>
                      <th className="text-left p-2">Acción</th>
                      <th className="text-left p-2">Recurso</th>
                      <th className="text-left p-2">Detalles</th>
                    </tr>
                  </thead>
                  <tbody>
                    {auditLogs.map((log) => (
                      <tr key={log.id} className="border-b hover:bg-gray-50">
                        <td className="p-2 font-mono text-xs">{new Date(log.timestamp).toLocaleString("es-CL")}</td>
                        <td className="p-2">{log.userEmail}</td>
                        <td className="p-2">
                          <Badge className={getActionColor(log.action)}>{log.action}</Badge>
                        </td>
                        <td className="p-2">{log.resource}</td>
                        <td className="p-2 text-xs text-gray-600">{log.details || "-"}</td>
                      </tr>
                    ))}
                  </tbody>
                </table>
                {auditLogs.length === 0 && (
                  <div className="text-center py-8 text-gray-500">No hay logs de auditoría disponibles</div>
                )}
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  )
}
